/**
 * <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 * JsOpt | JavaScript Optionalities
 * <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 *
 * JsOpt is a minimalistic Library to make working with Vanilla JavaScript more plesant.
 *
 * JsOpt accepts the following items when creating a new JsOpt Instance:
 *   > Selector (example: '#id-of-element' or '.class-of-elements')
 *   > Event
 *   > Object
 *   > Array
 *   > String
 *
 * @requires ECMAScript (ES) 6.* or up
 *
 * @version 0.1
 * @author Sander Tuinstra <sandert2001@hotmail.com>
 */
class Exception
{defaultMessage='Error';throw()
    {throw new Error(this.getOutputMessage())}
getOutputMessage()
    {return this.defaultMessage}}
class ArgumentException extends Exception
{name='';constructor(name)
    {super();this.name=name}}
class InvalidArgumentException extends ArgumentException
{defaultMessage='Invalid Argument Value for';expectedValue='';constructor(name,expectedValue='')
    {super(name);this.expectedValue=expectedValue;this.throw()}
getOutputMessage()
    {let output=this.defaultMessage;if(this.name!=null){output+=(` \`${this.name}\`.`)}
    if(this.expectedValue!=''){output+=(` Expected \`${this.expectedValue}\`.`)}
    return output}}
class MissingArgumentException extends ArgumentException
{defaultMessage='Missing Function Parameter';constructor(name)
    {super(name);this.throw()}
getOutputMessage()
    {let output=this.defaultMessage;if(this.name!=null){output+=(` \`${this.name}\``)}
    return output}}
class JsOptCore
{debug=0;elements=null;regexCollection={queryselectorValidator:/^([#]|[.])/};getRegex(key=RequiredArgument('key'))
    {return((this.isEmpty(this.regexCollection[key])===!0)?null:this.regexCollection[key])}
constructor(input=RequiredArgument('input'))
    {if(this.isQuerySelector(input)===!0){this.elements=document.querySelectorAll(input)}else{this.elements=((this.isEventVariable(input)===!0)?input.target.childNodes:input)}
    if((this.isEmpty()===!0)&&(this.debug===!0)){console.warn('No elements found by the given QuerySelector.')}
    return this}
find(selector=RequiredArgument('querySelector'))
    {ValidateArguments([{type:'string',value:selector,regex:this.getRegex('queryselectorValidator'),regexExplanation:'QuerySelector'}]);this.elements=document.querySelector(this.getQuerySelectors()[0]).querySelectorAll(selector);if((this.isEmpty()===!0)&&(this.debug===!0)){console.warn('No elements found by the given QuerySelector.')}
    return this}
foreach(callback=RequiredArgument('callback'))
    {ValidateArguments([{type:'function',value:callback}]);let isObject=(typeof this.elements==='object');let iterations=(this.elements.length==null)?Object.keys(this.elements).length:this.elements.length;for(var i=0;i<iterations;i++){let index=(isObject===!0)?Object.keys(this.elements)[i]:i;callback(index,this.elements[index])}
    return this}
getQuerySelectors()
    {let queryselectors=[];for(var i=0;i<this.elements.length;i++){let element=this.elements[i];let prefix=null;let selector=null;if((this.isEmpty(element.id)===!0)&&(this.isEmpty(element.className)===!1)){prefix='.';selector=element.className}else if((this.isEmpty(element.id)===!1)&&(this.isEmpty(element.className)===!0)){prefix='#';selector=element.id}
    queryselectors.push(prefix+selector)}
    return queryselectors}
isQuerySelector(input=RequiredArgument('input'))
    {return((typeof input==='string')&&(this.getRegex('queryselectorValidator').test(input)===!0))}
isEventVariable(eventVar=RequiredArgument('eventVar'))
    {return((eventVar instanceof Event)&&(this.isEmpty(eventVar.target.childNodes)===!1))}
isEmpty(value=this.elements)
    {return((value==='')||(value==null)||(value.length==0))}}
var $=(()=>{'use strict';return(input)=>{return new JsOptCore(input)}})();const RequiredArgument=(name)=>{throw new MissingArgumentException(name)};const ValidateArguments=(args)=>{let invalid_args=[];for(let i=0;i<args.length;i++){if(typeof args[i].value!=args[i].type){let txt=`\n  > argument #${i} must be of type \`${args[i].type}\`, \`${typeof args[i].value}\` given.`;invalid_args.push(txt);continue}
    if((args[i].regex!=null)&&(new RegExp(args[i].regex).test(args[i].value)===!1)){let txt=`\n  > argument #${i} must be a \`${args[i].regexExplanation}\`, \`${args[i].value}\` given.`;invalid_args.push(txt);continue}}
    if(invalid_args.length==0){return!0}
    let errorMsg='';for(let j=0;j<invalid_args.length;j++){errorMsg+=invalid_args[j]}
    throw new Error(errorMsg)};class JsOpt extends JsOptCore
{eventlist={};setEventList(name=RequiredArgument('name'),callback=RequiredArgument('callback')){ValidateArguments([{type:'string',value:name},{type:'function',value:callback}]);this.eventlist[name]=callback;return!0}
    getEvent(name=RequiredArgument('name'))
    {if(this.isEmpty(this.eventlist[name])===!0){return{}}
    return this.eventlist[name]}
    constructor(input=RequiredArgument('input'))
    {super(input)}
    ready(callback=RequiredArgument('callback'))
    {ValidateArguments([{type:'function',value:callback}]);document.addEventListener("DOMContentLoaded",(e)=>{callback(e)});return this}
    changeInner(newValue='')
    {this.foreach((index,element)=>{element.innerHTML=newValue});return this}
    show()
    {this.changeDisplayStyle('');return this}
    hide()
    {this.changeDisplayStyle('none');return this}
    remove()
    {this.foreach((index,element)=>{element.parentNode.removeChild(element)});return this}
    on(eventName=RequiredArgument('eventName'),callback=RequiredArgument('callback')){ValidateArguments([{type:'string',value:eventName},{type:'function',value:callback}]);this.foreach((index,element)=>{document.querySelector(this.getQuerySelectors()[index]).addEventListener(eventName,callback);this.setEventList(eventName,callback)});return this}
    off(eventName=null)
    {if(this.isEmpty(eventName)===!0){this.foreach((index,element)=>{$(this.eventlist).foreach((eventname,eventcallback)=>{document.querySelector(this.getQuerySelectors()[index]).removeEventListener(eventname,eventcallback)})})}else{let callback=this.getEvent(eventName);if(this.isEmpty(callback)===!0){if(this.debug===!0){console.warn('No callback found. Check if the EventListener is set.')}
    return!1}
    this.foreach((index,element)=>{document.querySelector(this.getQuerySelectors()[index]).removeEventListener(eventName,callback)})}
    return this}
    prepend(value=RequiredArgument('value'))
    {this.addToElements('afterbegin',value);return this}
    append(value)
    {this.addToElements('beforeend',value);return this}
    css(property=RequiredArgument('property'),value='')
    {this.foreach((index,element)=>{element.style[property]=value});return this}
    attr(name=RequiredArgument('name'),value='')
    {this.foreach((index,element)=>{element.setAttribute(name,value)});return this}
    changeDisplayStyle(property='')
    {this.foreach((index,element)=>{element.style.display=property});return this}
    addToElements(position=RequiredArgument('string'),value)
    {if(typeof value==='string'){this.foreach((index,element)=>{element.insertAdjacentHTML(position,value)})}else if((value instanceof JsOpt===!0)||(value instanceof JsOptCore===!0)){let valueNodes=value.elements;this.foreach((index,element)=>{value.foreach((valueNodeIndex,valueNode)=>{element.insertAdjacentHTML(position,valueNode.outerHTML)})})}
        return this}}
var $=(()=>{'use strict';return(input)=>{return new JsOpt(input)}})()
